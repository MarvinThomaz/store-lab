// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Store.Product.Tests.Acceptance.Product
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Create Product")]
    public partial class CreateProductFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CreateProduct.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Create Product", "\tThis case used to create product", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create Product with properties")]
        [NUnit.Framework.CategoryAttribute("Product")]
        public virtual void CreateProductWithProperties()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create Product with properties", new string[] {
                        "Product"});
#line 5
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Code",
                        "Name"});
            table1.AddRow(new string[] {
                        "1A2B3C",
                        "Samsung Galaxy S8"});
#line 7
 testRunner.Given("That the product was create with data", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table2.AddRow(new string[] {
                        "Memória Ram",
                        "6Gb"});
            table2.AddRow(new string[] {
                        "Memória Interna",
                        "64Gb"});
            table2.AddRow(new string[] {
                        "Tamanho da Tela",
                        "5.8\""});
#line 12
 testRunner.And("The product have this properties", ((string)(null)), table2, "And ");
#line 19
 testRunner.When("I save the product in database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Code",
                        "Name",
                        "IsDeleted"});
            table3.AddRow(new string[] {
                        "1A2B3C",
                        "Samsung Galaxy S8",
                        "false"});
#line 21
 testRunner.Then("the result should be a object created", ((string)(null)), table3, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table4.AddRow(new string[] {
                        "Memória Ram",
                        "6Gb"});
            table4.AddRow(new string[] {
                        "Memória Interna",
                        "64Gb"});
            table4.AddRow(new string[] {
                        "Tamanho da Tela",
                        "5.8\""});
#line 26
 testRunner.And("the properties of product is", ((string)(null)), table4, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create Product without properties")]
        [NUnit.Framework.CategoryAttribute("Product")]
        public virtual void CreateProductWithoutProperties()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create Product without properties", new string[] {
                        "Product"});
#line 34
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Code",
                        "Name"});
            table5.AddRow(new string[] {
                        "1A2B3C",
                        "Samsung Galaxy S8"});
#line 36
 testRunner.Given("That the product was create with data", ((string)(null)), table5, "Given ");
#line 41
 testRunner.When("I save the product in database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Code",
                        "Name",
                        "IsDeleted"});
            table6.AddRow(new string[] {
                        "1A2B3C",
                        "Samsung Galaxy S8",
                        "false"});
#line 43
 testRunner.Then("the result should be a object created", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
